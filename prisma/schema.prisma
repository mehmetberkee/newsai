// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model News {
  id              String    @id @default(cuid())
  title           String
  description     String?   @db.Text
  content         String?   @db.Text
  url             String    @unique
  imageUrl        String?
  publishedAt     DateTime
  source          String
  analysis        String?   @db.Text
  sentiment       Json?
  relatedArticles RelatedArticle[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Yeni ilişkiler
  savedBy       UserSavedNews[]
  comments      Comment[]
}

model RelatedArticle {
  id          String   @id @default(cuid())
  title       String
  source      String
  url         String   @unique
  publishedAt DateTime
  content     String?  @db.Text
  description String?  @db.Text
  news        News     @relation(fields: [newsId], references: [id])
  newsId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role      @default(USER)
  verificationToken String? @unique
  accounts      Account[]
  sessions      Session[]
  
  // Mevcut ilişkiler
  savedNews     UserSavedNews[]
  comments      Comment[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model UserSavedNews {
  id        String   @id @default(cuid())
  userId    String
  newsId    String
  createdAt DateTime @default(now())
  
  // İlişkiler
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  news      News     @relation(fields: [newsId], references: [id], onDelete: Cascade)

  @@unique([userId, newsId])
  @@index([userId])
  @@index([newsId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  userId    String
  newsId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // İlişkiler
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  news      News     @relation(fields: [newsId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([newsId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}
